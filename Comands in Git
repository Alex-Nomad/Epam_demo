$ ssh-keygen -t rsa -C "kuzmenko2012@gmail.com" - создание SSH key parе.
--------------------------------------------------------------------------------------------
$ git config --global user.name "Alexander Kuzmenko" - задать свое имя глобально.
--------------------------------------------------------------------------------------------
$ git config --global user.email "kuzmenko2012@gmail.com" - задать почту глобально.
--------------------------------------------------------------------------------------------
$ git config --global user.name - проверка глобального имени.
--------------------------------------------------------------------------------------------
$ git config --global ser.email - проверка глобальной почты.
--------------------------------------------------------------------------------------------
$ cd /d/EPAM/DATA/TEMP - новигация по папкам (/d/EPAM/DATA/TEMP).
--------------------------------------------------------------------------------------------
$ git clone git@github.com:Alex-Nomad/Epam_demo.git - выгрузка файлов с репозитория на локальную машину.
--------------------------------------------------------------------------------------------
$ ls - выводит список папок и файлов в текущей папке (/d/EPAM/DATA/TEMР).
--------------------------------------------------------------------------------------------
$ cd Epam-demo/ - переход в подпапку в текущей папке (/d/EPAM/DATA/TEMP/epam_demo (main)).
--------------------------------------------------------------------------------------------
$ git status - проверка наличия новых файлов.
/* ОТВЕТ
  On branch main
  Your branch is up to date with 'origin/main'.

  Untracked files:
  (use "git add <file>..." to include in what will be committed)
        song.txt

  nothing added to commit but untracked files present (use "git add" to track)
*/
--------------------------------------------------------------------------------------------
$ git add song.txt - добавление нового файла к проекту.
--------------------------------------------------------------------------------------------
$ git status - проверка утверждения нового файла.
/* ОТВЕТ
  On branch main
  Your branch is up to date with 'origin/main'.

  Changes to be committed:
    (use "git restore --staged <file>..." to unstage)
          new file:   song.txt
*/
--------------------------------------------------------------------------------------------
$ git commit -m "add 3 lines in the song" - определения какие именно строки нужно сохранить в файле.
/* ОТВЕТ
  [main f59754f] add 3 lines in the song
  1 file changed, 3 insertions(+)
  create mode 100644 song.txt
*/
--------------------------------------------------------------------------------------------
$ git log - информация об изменениях.
/* ОТВЕТ
  commit f59754f468232397beb00e11e3816584066a3f65 (HEAD -> main)
  Author: Alexander Kuzmenko <kuzmenko2012@gmail.com>
  Date:   Thu May 5 10:21:03 2022 +0300

      add 3 lines in the song

  commit e91ac50cce43193c3c586e3540f394aa1a480938 (origin/main, origin/HEAD)
  Author: Alex <kuzmenko2012@gmail.com>
  Date:   Thu May 5 09:59:26 2022 +0300

      Initial commit
*/
--------------------------------------------------------------------------------------------
$ git push - перенос изменений в репозиторий.
/* ОТВЕТ
  Enumerating objects: 4, done.
  Counting objects: 100% (4/4), done.
  Delta compression using up to 4 threads
  Compressing objects: 100% (2/2), done.
  Writing objects: 100% (3/3), 320 bytes | 320.00 KiB/s, done.
  Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
  To github.com:Alex-Nomad/Epam_demo.git
     e91ac50..f59754f  main -> main
*/
--------------------------------------------------------------------------------------------
$ git pull - синхронизация файлов на локальной машине с репозиторием.
/*ОТВЕТ
  remote: Enumerating objects: 11, done.
  remote: Counting objects: 100% (11/11), done.
  remote: Compressing objects: 100% (8/8), done.
  remote: Total 9 (delta 2), reused 0 (delta 0), pack-reused 0
  Unpacking objects: 100% (9/9), 3.17 KiB | 60.00 KiB/s, done.
  From github.com:Alex-Nomad/Epam_demo
     f59754f..a46de93  main       -> origin/main
  Updating f59754f..a46de93
  Fast-forward
   Comands in Git | 76 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   song.txt       |  3 +++
   2 files changed, 79 insertions(+)
   create mode 100644 Comands in Git
--------------------------------------------------------------------------------------------
$ git gui& - открыть GUI
--------------------------------------------------------------------------------------------
$ gitk& - открыть GIT K (все файлы, история, ветвления... ХЗ)
--------------------------------------------------------------------------------------------
!!!!!!!!!!!!!!! НУЖНО УТОЧНИТЬ НАЗНАЧЕНИЯ
$ git checkout -- file.txt - отмена изменений, содержимое файла будет восстановлено до последней известной версии git..
$ git checkout . - отмена изменений. Удаляет новые файлы. НЕ ТОЧНО.
& git clean -xdf - используется для операций с неотслеживаемыми файлами. Неотслеживаемые файлы — это файлы, которые созданы в рабочем каталоге репозитория, но еще не добавлены в индекс отслеживания репозитория с помощью команды "git add". 
$ git reset -- file.txt - стадия индекса. Отмена индекации.
$ git reset HEAD^^ (HEAD~2) - локальная ветка. Отмена HEAD~2.
$ git commit --amend -m "commit message" - локальная ветка. Отмена коммита (совершения).
$ git revert <sha1> - удаление репозитория SHA1.
--------------------------------------------------------------------------------------------
$ git reset --soft - Не касается индексного файла или рабочего дерева вообще (но сбрасывает заголовок до , как это делают все режимы). Это оставляет все ваши измененные файлы «Изменения должны быть зафиксированы», как было бы выражено.<commit>git status.
$ git reset --mixed - Не касается индексного файла или рабочего дерева вообще (но сбрасывает заголовок до , как это делают все режимы). Это оставляет все ваши измененные файлы «Изменения должны быть зафиксированы», как было бы выражено.<commit>git status.
$ git reset --hard - Сбрасывает индекс и рабочее дерево. Любые изменения отслеживаемых файлов в рабочем дереве с тех пор отбрасываются. Любые неотслеживаемые файлы или каталоги на пути записи любых отслеживаемых файлов просто удаляются. СОВСЕМ УДАЛЯЕТ!
--------------------------------------------------------------------------------------------
$ git revert - используется для записи некоторых новых коммитов, чтобы обратить вспять эффект некоторых более ранних коммитов (часто только неисправных).
--------------------------------------------------------------------------------------------
.gitignore - назваие файла. В файл указывается список файлов которые намеренно неотслеживаютья, которые Git должен игнорировать. Файлы, уже отслеживаемые Git, не затрагиваются; подробности см. в ПРИМЕЧАНИЯХ ниже.gitignore
--------------------------------------------------------------------------------------------
$ git checkiut -b name_for_new_brunch - создание новой ветки.
$ git checkout -d name_of_deleted_brunch - удаление конкретной ветки.
$ git checkot merge name_of_merge_brunch - !!! нужно перейти в ветку к которой хоти добавить новую ветвь. Через status убедиться в какой ветке находишься и тогда сделать merge той ветки которую нужно присоеденить.
--------------------------------------------------------------------------------------------
!!!!! РЕШЕНИЕ ПРОБЛЕМ
$ git merge --abort - прерывание объединение.
$ git checkou --Xors --Xtheirs - решение путем выбора версии.
$ git diff - решить вручную.
$ git revert - отменить объединение.



















